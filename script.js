/* SAMMANFATTNING av applikationen:

Funktioner: Funktionerna ansvarar f√∂r specifika uppgifter, t.ex. att h√§mta data, uppdatera DOM eller hantera localStorage.
Arrays: Anv√§nds f√∂r att att sortera st√§der baserat p√• hur m√•nga g√•nger de har s√∂kts och begr√§nsa listan till de tre mest popul√§ra st√§derna.
Loops: Anv√§nds f√∂r att g√• igenom listan av st√§der (arrayer) och skapa listobjekt som l√§ggs till i favoritlistan.
if-else: Anv√§nds f√∂r att visa ett varningsmeddelande om anv√§ndaren f√∂rs√∂ker l√§gga till en stad utan att fylla i f√§ltet eller om man fyller i en stad som inte finns.
Felhantering: Fel hanteras med try-catch-block, och anv√§ndaren f√•r feedback via felmeddelanden.
DOM-manipulation: DOM-element uppdateras dynamiskt baserat p√• anv√§ndarens interaktioner.
localStorage: Anv√§nds f√∂r att spara och h√§mta data som s√∂kantal, senaste v√§der och fantasist√§der.
Event Listeners: Anv√§nds f√∂r att hantera anv√§ndarens interaktioner, t.ex. formul√§rinl√§mning och klickh√§ndelser.

*/

// API-nyckel och URL f√∂r att h√§mta v√§derdata
const API_KEY = 'fe227ebfcdb18d17f4c4d67bde3e94d4';
const API_URL = 'https://api.openweathermap.org/data/2.5/weather';

// Skapar en karta f√∂r att lagra s√∂kantal fr√•n localStorage
const searchCounts = new Map(getFromLocalStorage('searchCounts') || []);
const MAX_FAVORITES = 3; // Max antal favoriter som kan visas

// Funktion f√∂r att spara data i localStorage
function saveToLocalStorage(key, data) {
    localStorage.setItem(key, JSON.stringify(data)); // Konverterar data till JSON-str√§ng och sparar
}

// Funktion f√∂r att h√§mta data fr√•n localStorage
function getFromLocalStorage(key) {
    const data = localStorage.getItem(key); // H√§mtar data fr√•n localStorage
    return data ? JSON.parse(data) : null; // Om data finns, konvertera fr√•n JSON till objekt
}

// Funktion f√∂r att spara senaste v√§derdata i localStorage
function saveLastWeather(weatherData) {
    saveToLocalStorage('lastWeather', weatherData);
}

// Funktion f√∂r att visa v√§der- och favoritsektionerna
function showWeatherSections() {
    const weatherSection = document.querySelector('.weather'); // H√§mtar v√§dersektionen fr√•n DOM
    const favouritesSection = document.querySelector('.favourites'); // H√§mtar favoritsektionen fr√•n DOM
    
    if (weatherSection && favouritesSection) { // Kontrollera att b√•da sektionerna finns
        weatherSection.classList.add('visible'); // G√∂r v√§dersektionen synlig
        favouritesSection.classList.add('visible'); // G√∂r favoritsektionen synlig
        
        // Tvingar en omritning av DOM (reflow)
        weatherSection.offsetHeight;
        favouritesSection.offsetHeight;
    }
}

// En objektkarta f√∂r att mappa v√§dertyper till emojis
const weatherEmojis = {
    'Clear': '‚òÄÔ∏è',
    'Clouds': '‚òÅÔ∏è',
    'Rain': 'üåßÔ∏è',
    'Drizzle': 'üå¶Ô∏è',
    'Thunderstorm': '‚õàÔ∏è',
    'Snow': 'üå®Ô∏è',
    'Mist': 'üå´Ô∏è',
    'Fog': 'üå´Ô∏è',
    'Haze': 'üå´Ô∏è',
    'Scattered Clouds': '‚õÖ',
    'Broken Clouds': '‚òÅÔ∏è',
    'Few Clouds': 'üå§Ô∏è',
    'Overcast Clouds': '‚òÅÔ∏è'
};

// DOM-element f√∂r att hantera v√§der och s√∂kningar
const searchForm = document.querySelector('.search__form'); // Formul√§r f√∂r v√§ders√∂kning
const searchInput = document.querySelector('.search__input'); // Inputf√§lt f√∂r stadss√∂kning
const weatherIcon = document.querySelector('.weather__icon span'); // Ikon f√∂r v√§der
const weatherCondition = document.querySelector('.weather__condition h2'); // V√§derbeskrivning
const weatherCity = document.querySelector('.weather__city h3'); // Stadens namn
const favouritesList = document.querySelector('.favourites__list'); // Lista √∂ver favoriter

// Funktion f√∂r att h√§mta v√§derdata fr√•n API eller fantasist√§der
async function getWeatherData(city) {
    const fantasyCities = loadFantasyCities(); // Laddar fantasist√§der fr√•n localStorage
    const lowercaseCity = city.toLowerCase(); // Konverterar stadens namn till gemener
    
    // Kontrollera om staden finns i fantasist√§der
    if (fantasyCities[lowercaseCity]) {
        return {
            weather: [{
                main: fantasyCities[lowercaseCity].weather // H√§mtar v√§der fr√•n fantasist√§der
            }],
            name: fantasyCities[lowercaseCity].name // H√§mtar stadens namn
        };
    }
    
    // Om staden inte √§r en fantasistad, h√§mta data fr√•n API
    try {
        const response = await fetch(`${API_URL}?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`);
        if (!response.ok) {
            throw new Error('City not found'); // Felhantering om staden inte hittas
        }
        return await response.json(); // Returnerar v√§derdata som JSON
    } catch (error) {
        throw error;
    }
}

// Funktion f√∂r att uppdatera v√§derinformationen i DOM
function updateWeatherDisplay(weatherData) {
    const mainWeather = weatherData.weather[0].main; // H√§mtar huvudv√§der fr√•n data
    const city = weatherData.name; // H√§mtar stadens namn

    weatherIcon.textContent = weatherEmojis[mainWeather] || '‚ùì'; // Uppdaterar v√§derikonen
    weatherCondition.textContent = mainWeather; // Uppdaterar v√§derbeskrivningen
    weatherCity.textContent = city; // Uppdaterar stadens namn

    saveLastWeather(weatherData); // Sparar senaste v√§derdata i localStorage
}

// Funktion f√∂r att ladda senaste v√§derdata fr√•n localStorage
async function loadLastWeather() {
    const lastWeather = getFromLocalStorage('lastWeather'); // H√§mtar senaste v√§derdata
    if (lastWeather) {
        showWeatherSections(); // Visar v√§dersektionerna
        updateWeatherDisplay(lastWeather); // Uppdaterar v√§derinformationen
    }
}

// Eventlistener f√∂r att ladda data vid sidladdning
window.addEventListener('load', () => {
    loadLastWeather(); // Laddar senaste v√§derdata
    
    const savedSearchCounts = getFromLocalStorage('searchCounts'); // H√§mtar s√∂kantal fr√•n localStorage
    if (savedSearchCounts) {
        searchCounts.clear(); // Rensar den nuvarande kartan
        savedSearchCounts.forEach(([city, count]) => {
            searchCounts.set(city, count); // √Öterst√§ller s√∂kantal
        });
        
        if (searchCounts.size > 0) {
            addToFavorites(Array.from(searchCounts.keys())[0]); // L√§gger till f√∂rsta staden i favoriter
        }
    }
});

// Funktion f√∂r att l√§gga till en stad i favoriter
function addToFavorites(city) {
    searchCounts.set(city, (searchCounts.get(city) || 0) + 1); // √ñkar s√∂kantalet f√∂r staden
    saveToLocalStorage('searchCounts', Array.from(searchCounts.entries())); // Sparar uppdaterad karta i localStorage
    
    const sortedCities = Array.from(searchCounts.entries()) // Konverterar kartan till en array
        .sort((a, b) => b[1] - a[1]) // Sorterar st√§der efter s√∂kantal (fallande)
        .slice(0, MAX_FAVORITES); // Begr√§nsar till max antal favoriter
    
    favouritesList.innerHTML = ''; // Rensar nuvarande favoritlista
    
    sortedCities.forEach(([cityName, count]) => { // Loopar igenom de sorterade st√§derna
        const li = document.createElement('li'); // Skapar ett nytt listobjekt
        li.className = 'favourites__item'; // L√§gger till en klass
        li.textContent = cityName; // S√§tter stadens namn som text
        
        li.addEventListener('click', () => { // L√§gger till en klickh√§ndelse
            searchInput.value = cityName; // Fyller i stadens namn i s√∂kf√§ltet
            handleWeatherSearch(cityName); // S√∂ker efter v√§der f√∂r staden
        });
        
        favouritesList.appendChild(li); // L√§gger till listobjektet i DOM
    });
}

// Funktion f√∂r att visa ett felmeddelande
function showError(message) {
    weatherIcon.textContent = '‚ùå'; // Visar en felikon
    weatherCondition.innerHTML = ''; // Rensar v√§derbeskrivningen
    
    const errorParagraph = document.createElement('p'); // Skapar ett nytt paragrafobjekt
    errorParagraph.className = 'weather__error'; // L√§gger till en klass
    errorParagraph.textContent = message; // S√§tter felmeddelandet som text
    weatherCondition.appendChild(errorParagraph); // L√§gger till paragrafen i DOM
    
    weatherCity.textContent = ''; // Rensar stadens namn
}

// Funktion f√∂r att hantera v√§ders√∂kning
async function handleWeatherSearch(city) {
    try {
        const weatherData = await getWeatherData(city); // H√§mtar v√§derdata
        showWeatherSections(); // Visar v√§dersektionerna
        updateWeatherDisplay(weatherData); // Uppdaterar v√§derinformationen
        addToFavorites(city); // L√§gger till staden i favoriter
    } catch (error) {
        showError('City not found, please add the city'); // Visar felmeddelande vid fel
    }
}

// Eventlistener f√∂r att hantera formul√§rinl√§mning
searchForm.addEventListener('submit', (e) => {
    e.preventDefault(); // F√∂rhindrar standardbeteendet
    const city = searchInput.value.trim(); // H√§mtar och trimmar stadens namn
    if (city) {
        handleWeatherSearch(city); // S√∂ker efter v√§der f√∂r staden
        searchInput.value = ''; // Rensar s√∂kf√§ltet
    }
});

// Nyckel f√∂r att lagra fantasist√§der i localStorage
const FANTASY_CITIES_KEY = 'fantasyCities';

// Funktion f√∂r att ladda fantasist√§der fr√•n localStorage
function loadFantasyCities() {
    return JSON.parse(localStorage.getItem(FANTASY_CITIES_KEY) || '{}'); // Returnerar ett objekt med fantasist√§der
}

// Funktion f√∂r att spara fantasist√§der i localStorage
function saveFantasyCities(cities) {
    localStorage.setItem(FANTASY_CITIES_KEY, JSON.stringify(cities)); // Sparar fantasist√§der som JSON
}

// DOM-element f√∂r modalen och formul√§ret
const modal = document.getElementById('addCityModal'); // Modal f√∂r att l√§gga till stad
const closeButton = document.querySelector('.close-button'); // St√§ng-knapp f√∂r modalen
const fantasyCityForm = document.getElementById('fantasyCityForm'); // Formul√§r f√∂r att l√§gga till fantasistad
const addCityButton = document.querySelector('.search__add-button'); // Knapp f√∂r att √∂ppna modalen

// Eventlistener f√∂r att √∂ppna modalen
addCityButton.addEventListener('click', () => {
    modal.style.display = 'block'; // Visar modalen
});

// Eventlistener f√∂r att st√§nga modalen
closeButton.addEventListener('click', () => {
    modal.style.display = 'none'; // D√∂lj modalen
});

// Eventlistener f√∂r att st√§nga modalen vid klick utanf√∂r
window.addEventListener('click', (event) => {
    if (event.target === modal) {
        modal.style.display = 'none'; // D√∂lj modalen
    }
});

// Eventlistener f√∂r att hantera inl√§mning av fantasistadsformul√§ret
fantasyCityForm.addEventListener('submit', (e) => {
    e.preventDefault(); // F√∂rhindrar standardbeteendet
    
    const cityName = document.getElementById('fantasyCityName').value.trim(); // H√§mtar stadens namn
    const weather = document.querySelector('.select-selected').getAttribute('data-value'); // H√§mtar valt v√§der
    
    if (!cityName || !weather) { // Kontrollera att alla f√§lt √§r ifyllda
        alert('Please fill in all fields'); // Visar ett varningsmeddelande
        return;
    }
    
    const fantasyCities = loadFantasyCities(); // Laddar befintliga fantasist√§der
    
    fantasyCities[cityName.toLowerCase()] = { // L√§gger till den nya staden
        name: cityName,
        weather: weather
    };
    
    saveFantasyCities(fantasyCities); // Sparar uppdaterade fantasist√§der
    showWeatherSections(); // Visar v√§dersektionerna
    handleWeatherSearch(cityName); // Uppdaterar v√§derinformationen f√∂r den nya staden
    
    fantasyCityForm.reset(); // √Öterst√§ller formul√§ret
    document.querySelector('.select-selected').textContent = 'Select Weather'; // √Öterst√§ller dropdown
    modal.style.display = 'none'; // D√∂lj modalen
    
    alert(`${cityName} has been added to your fantasy cities!`); // Visar ett framg√•ngsmeddelande
});